services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notification-network

  kafka:
    build:
      context: ./kafka
      dockerfile: Dockerfile
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: [ "CMD", "/usr/local/bin/healthcheck.sh" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - notification-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - notification-network

  base-kafka-service:
    image: health-notification-system-base-kafka-service
    build:
      context: .
      dockerfile: services/kafka/base.Dockerfile

  notification-producer:
    build:
      context: .
      dockerfile: services/kafka/producer.Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      base-kafka-service:
          condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_URL: redis://redis:6379/0
      TOPIC_PREFIX: daily_notifications.push
    volumes:
      - .:/app
    networks:
      - notification-network

  notification-consumer:
    build:
      context: .
      dockerfile: services/kafka/consumer.Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      base-kafka-service:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_URL: redis://redis:6379/0
      KAFKA_GROUP_ID: notification-consumer-group
      RETRY_TOPIC: daily_notifications.retry
    volumes:
      - .:/app
    networks:
      - notification-network

  notification-retry-consumer:
    build:
      context: .
      dockerfile: services/kafka/retry_consumer.Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      base-kafka-service:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_URL: redis://redis:6379/0
      KAFKA_GROUP_ID: notification-retry-consumer-group
      DEAD_LETTER_TOPIC: daily_notifications.dead_letter
    volumes:
      - .:/app
    networks:
      - notification-network

volumes:
  kafka_data:

networks:
  notification-network:
    name: notification-network